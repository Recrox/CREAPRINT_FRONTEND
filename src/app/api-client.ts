//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export module apiClient {

export interface IApiClient {
    /**
     * @return OK
     */
    articlesAll( cancelToken?: CancelToken): Promise<Article[]>;
    /**
     * @param body (optional) 
     * @return OK
     */
    articlesPOST(body?: Article | undefined,  cancelToken?: CancelToken): Promise<Article>;
    /**
     * @return OK
     */
    articlesGET(id: number,  cancelToken?: CancelToken): Promise<Article>;
    /**
     * @param page (optional) 
     * @param pageSize (optional) 
     * @return OK
     */
    paged(page?: number | undefined, pageSize?: number | undefined,  cancelToken?: CancelToken): Promise<Article[]>;
    /**
     * @return OK
     */
    count( cancelToken?: CancelToken): Promise<number>;
}

export class ApiClient implements IApiClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @return OK
     */
    articlesAll( cancelToken?: CancelToken): Promise<Article[]> {
        let url_ = this.baseUrl + "/api/Articles";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processArticlesAll(_response);
        });
    }

    protected processArticlesAll(response: AxiosResponse): Promise<Article[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Article.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return Promise.resolve<Article[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Article[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    articlesPOST(body?: Article | undefined, cancelToken?: CancelToken): Promise<Article> {
        let url_ = this.baseUrl + "/api/Articles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processArticlesPOST(_response);
        });
    }

    protected processArticlesPOST(response: AxiosResponse): Promise<Article> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Article.fromJS(resultData200);
            return Promise.resolve<Article>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Article>(null as any);
    }

    /**
     * @return OK
     */
    articlesGET(id: number, cancelToken?: CancelToken): Promise<Article> {
        let url_ = this.baseUrl + "/api/Articles/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processArticlesGET(_response);
        });
    }

    protected processArticlesGET(response: AxiosResponse): Promise<Article> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Article.fromJS(resultData200);
            return Promise.resolve<Article>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Article>(null as any);
    }

    /**
     * @param page (optional) 
     * @param pageSize (optional) 
     * @return OK
     */
    paged(page?: number | undefined, pageSize?: number | undefined, cancelToken?: CancelToken): Promise<Article[]> {
        let url_ = this.baseUrl + "/api/Articles/paged?";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new globalThis.Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPaged(_response);
        });
    }

    protected processPaged(response: AxiosResponse): Promise<Article[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Article.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return Promise.resolve<Article[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Article[]>(null as any);
    }

    /**
     * @return OK
     */
    count( cancelToken?: CancelToken): Promise<number> {
        let url_ = this.baseUrl + "/api/Articles/count";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCount(_response);
        });
    }

    protected processCount(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : null as any;
    
            return Promise.resolve<number>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(null as any);
    }
}

export class Article implements IArticle {
    id?: number;
    createdBy?: string | undefined;
    createdOn?: Date;
    updatedBy?: string | undefined;
    updatedOn?: Date | undefined;
    title!: string | undefined;
    content!: string | undefined;
    price!: number;
    categoryId?: number | undefined;
    category?: Category;

    constructor(data?: IArticle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdBy = _data["createdBy"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : undefined as any;
            this.updatedBy = _data["updatedBy"];
            this.updatedOn = _data["updatedOn"] ? new Date(_data["updatedOn"].toString()) : undefined as any;
            this.title = _data["title"];
            this.content = _data["content"];
            this.price = _data["price"];
            this.categoryId = _data["categoryId"];
            this.category = _data["category"] ? Category.fromJS(_data["category"]) : undefined as any;
        }
    }

    static fromJS(data: any): Article {
        data = typeof data === 'object' ? data : {};
        let result = new Article();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdBy"] = this.createdBy;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : undefined as any;
        data["updatedBy"] = this.updatedBy;
        data["updatedOn"] = this.updatedOn ? this.updatedOn.toISOString() : undefined as any;
        data["title"] = this.title;
        data["content"] = this.content;
        data["price"] = this.price;
        data["categoryId"] = this.categoryId;
        data["category"] = this.category ? this.category.toJSON() : undefined as any;
        return data;
    }
}

export interface IArticle {
    id?: number;
    createdBy?: string | undefined;
    createdOn?: Date;
    updatedBy?: string | undefined;
    updatedOn?: Date | undefined;
    title: string | undefined;
    content: string | undefined;
    price: number;
    categoryId?: number | undefined;
    category?: Category;
}

export class Category implements ICategory {
    id?: number;
    createdBy?: string | undefined;
    createdOn?: Date;
    updatedBy?: string | undefined;
    updatedOn?: Date | undefined;
    name!: string | undefined;
    articles?: Article[] | undefined;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdBy = _data["createdBy"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : undefined as any;
            this.updatedBy = _data["updatedBy"];
            this.updatedOn = _data["updatedOn"] ? new Date(_data["updatedOn"].toString()) : undefined as any;
            this.name = _data["name"];
            if (Array.isArray(_data["articles"])) {
                this.articles = [] as any;
                for (let item of _data["articles"])
                    this.articles!.push(Article.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdBy"] = this.createdBy;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : undefined as any;
        data["updatedBy"] = this.updatedBy;
        data["updatedOn"] = this.updatedOn ? this.updatedOn.toISOString() : undefined as any;
        data["name"] = this.name;
        if (Array.isArray(this.articles)) {
            data["articles"] = [];
            for (let item of this.articles)
                data["articles"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICategory {
    id?: number;
    createdBy?: string | undefined;
    createdOn?: Date;
    updatedBy?: string | undefined;
    updatedOn?: Date | undefined;
    name: string | undefined;
    articles?: Article[] | undefined;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

}